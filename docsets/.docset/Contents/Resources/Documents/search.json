{"Typealiases.html#/s:12SwiftRoaring0B10Statisticsa":{"name":"RoaringStatistics","abstract":"<p>This class contains different values about a given RoaringBitmap</p>"},"Classes/RoaringBitmap/RoaringBitmapIterator.html#/s:s16IteratorProtocolP4next7ElementQzSgyF":{"name":"next()","parent_name":"RoaringBitmapIterator"},"Classes/RoaringBitmap.html#/s:s8SequenceP7Element":{"name":"Element","parent_name":"RoaringBitmap"},"Classes/RoaringBitmap.html#/s:12SwiftRoaring0B6BitmapCACycfc":{"name":"init()","abstract":"<p>Creates a new bitmap (initially empty)</p>","parent_name":"RoaringBitmap"},"Classes/RoaringBitmap.html#/s:12SwiftRoaring0B6BitmapCACs6UInt64V3min_AE3maxs6UInt32V4steptcfc":{"name":"init(min:max:step:)","abstract":"<p>Add all the values between min (included) and max (excluded) that are at a","parent_name":"RoaringBitmap"},"Classes/RoaringBitmap.html#/s:12SwiftRoaring0B6BitmapCACs6UInt32V8capacity_tcfc":{"name":"init(capacity:)","abstract":"<p>Creates a new bitmap (initially empty) with a provided","parent_name":"RoaringBitmap"},"Classes/RoaringBitmap.html#/s:12SwiftRoaring0B6BitmapCACSays6UInt32VG6values_tcfc":{"name":"init(values:)","abstract":"<p>Creates a new bitmap from a pointer of UInt32 integers</p>","parent_name":"RoaringBitmap"},"Classes/RoaringBitmap.html#/s:s25ExpressibleByArrayLiteralPx0cD7ElementQz05arrayD0d_tcfc":{"name":"init(arrayLiteral:)","parent_name":"RoaringBitmap"},"Classes/RoaringBitmap.html#/s:12SwiftRoaring0B6BitmapC12intersectionA2CF":{"name":"intersection(_:)","abstract":"<p>Computes the intersection between two bitmaps and returns new bitmap.</p>","parent_name":"RoaringBitmap"},"Classes/RoaringBitmap.html#/s:12SwiftRoaring0B6BitmapC1aoiA2C_ACtFZ":{"name":"&(_:_:)","abstract":"<p>Computes the intersection between two bitmaps and returns new bitmap.</p>","parent_name":"RoaringBitmap"},"Classes/RoaringBitmap.html#/s:12SwiftRoaring0B6BitmapC16formIntersectionyACF":{"name":"formIntersection(_:)","abstract":"<p>Inplace version modifies x1, x1 == x2 is allowed</p>","parent_name":"RoaringBitmap"},"Classes/RoaringBitmap.html#/s:12SwiftRoaring0B6BitmapC2aeoiyAC_ACtFZ":{"name":"&=(_:_:)","abstract":"<p>Inplace version modifies x1, x1 == x2 is allowed</p>","parent_name":"RoaringBitmap"},"Classes/RoaringBitmap.html#/s:12SwiftRoaring0B6BitmapC17intersectionCounts6UInt64VACF":{"name":"intersectionCount(_:)","abstract":"<p>Computes the size of the intersection between two bitmaps.</p>","parent_name":"RoaringBitmap"},"Classes/RoaringBitmap.html#/s:12SwiftRoaring0B6BitmapC9intersectSbACF":{"name":"intersect(_:)","abstract":"<p>Check whether two bitmaps intersect.</p>","parent_name":"RoaringBitmap"},"Classes/RoaringBitmap.html#/s:12SwiftRoaring0B6BitmapC12jaccardIndexSdACF":{"name":"jaccardIndex(_:)","abstract":"<p>Computes the Jaccard index between two bitmaps. (Also known as the Tanimoto","parent_name":"RoaringBitmap"},"Classes/RoaringBitmap.html#/s:12SwiftRoaring0B6BitmapC10unionCounts6UInt64VACF":{"name":"unionCount(_:)","abstract":"<p>Computes the size of the union between two bitmaps.</p>","parent_name":"RoaringBitmap"},"Classes/RoaringBitmap.html#/s:12SwiftRoaring0B6BitmapC16subtractingCounts6UInt64VACF":{"name":"subtractingCount(_:)","abstract":"<p>Computes the size of the difference (andnot) between two bitmaps.</p>","parent_name":"RoaringBitmap"},"Classes/RoaringBitmap.html#/s:12SwiftRoaring0B6BitmapC24symmetricDifferenceCounts6UInt64VACF":{"name":"symmetricDifferenceCount(_:)","abstract":"<p>Computes the size of the symmetric difference (andnot) between two bitmaps.</p>","parent_name":"RoaringBitmap"},"Classes/RoaringBitmap.html#/s:12SwiftRoaring0B6BitmapC5unionA2CF":{"name":"union(_:)","abstract":"<p>Computes the union between two bitmaps and returns new bitmap.</p>","parent_name":"RoaringBitmap"},"Classes/RoaringBitmap.html#/s:12SwiftRoaring0B6BitmapC1ooiA2C_ACtFZ":{"name":"|(_:_:)","abstract":"<p>Computes the union between two bitmaps and returns new bitmap.</p>","parent_name":"RoaringBitmap"},"Classes/RoaringBitmap.html#/s:12SwiftRoaring0B6BitmapC9formUnionyACF":{"name":"formUnion(_:)","abstract":"<p>Inplace version of union, modifies x1.</p>","parent_name":"RoaringBitmap"},"Classes/RoaringBitmap.html#/s:12SwiftRoaring0B6BitmapC2oeoiyAC_ACtFZ":{"name":"|=(_:_:)","abstract":"<p>Inplace version of union, modifies x1.</p>","parent_name":"RoaringBitmap"},"Classes/RoaringBitmap.html#/s:12SwiftRoaring0B6BitmapC9unionManyACSayACGF":{"name":"unionMany(_:)","abstract":"<p>Compute the union of &lsquo;number&rsquo; bitmaps. See also unionManyHeap().</p>","parent_name":"RoaringBitmap"},"Classes/RoaringBitmap.html#/s:12SwiftRoaring0B6BitmapC13unionManyHeapACSayACGF":{"name":"unionManyHeap(_:)","abstract":"<p>Compute the union of &lsquo;number&rsquo; bitmaps using a heap. This can","parent_name":"RoaringBitmap"},"Classes/RoaringBitmap.html#/s:12SwiftRoaring0B6BitmapC19symmetricDifferenceA2CF":{"name":"symmetricDifference(_:)","abstract":"<p>Computes the symmetric difference (xor) between two bitmaps","parent_name":"RoaringBitmap"},"Classes/RoaringBitmap.html#/s:12SwiftRoaring0B6BitmapC1xoiA2C_ACtFZ":{"name":"^(_:_:)","abstract":"<p>Computes the symmetric difference (xor) between two bitmaps","parent_name":"RoaringBitmap"},"Classes/RoaringBitmap.html#/s:12SwiftRoaring0B6BitmapC23formSymmetricDifferenceyACF":{"name":"formSymmetricDifference(_:)","abstract":"<p>Inplace version of symmetricDifference(&hellip;), modifies x1. x1 != x2.</p>","parent_name":"RoaringBitmap"},"Classes/RoaringBitmap.html#/s:12SwiftRoaring0B6BitmapC2xeoiyAC_ACtFZ":{"name":"^=(_:_:)","abstract":"<p>Inplace version of symmetricDifference(&hellip;), modifies x1. x1 != x2.</p>","parent_name":"RoaringBitmap"},"Classes/RoaringBitmap.html#/s:12SwiftRoaring0B6BitmapC23symmetricDifferenceManyACSayACGF":{"name":"symmetricDifferenceMany(_:)","abstract":"<p>Compute the symmetric difference of n bitmaps.</p>","parent_name":"RoaringBitmap"},"Classes/RoaringBitmap.html#/s:12SwiftRoaring0B6BitmapC11subtractingA2CF":{"name":"subtracting(_:)","abstract":"<p>Computes the  difference (andnot) between two bitmaps","parent_name":"RoaringBitmap"},"Classes/RoaringBitmap.html#/s:12SwiftRoaring0B6BitmapC1soiA2C_ACtFZ":{"name":"-(_:_:)","abstract":"<p>Computes the  difference (andnot) between two bitmaps","parent_name":"RoaringBitmap"},"Classes/RoaringBitmap.html#/s:12SwiftRoaring0B6BitmapC8subtractyACF":{"name":"subtract(_:)","abstract":"<p>Inplace version of subtracting(&hellip;), modifies x1. x1 != x2.</p>","parent_name":"RoaringBitmap"},"Classes/RoaringBitmap.html#/s:12SwiftRoaring0B6BitmapC2seoiyAC_ACtFZ":{"name":"-=(_:_:)","abstract":"<p>Inplace version of subtracting(&hellip;), modifies x1. x1 != x2.</p>","parent_name":"RoaringBitmap"},"Classes/RoaringBitmap.html#/s:12SwiftRoaring0B6BitmapC6equalsSbACF":{"name":"equals(_:)","abstract":"<p>Return true if the two bitmaps contain the same elements.</p>","parent_name":"RoaringBitmap"},"Classes/RoaringBitmap.html#/s:12SwiftRoaring0B6BitmapC2eeoiSbAC_ACtFZ":{"name":"==(_:_:)","abstract":"<p>Return true if the two bitmaps contain the same elements.</p>","parent_name":"RoaringBitmap"},"Classes/RoaringBitmap.html#/s:12SwiftRoaring0B6BitmapC2neoiSbAC_ACtFZ":{"name":"!=(_:_:)","abstract":"<p>Return true if the two bitmaps DO NOT contain the same elements.</p>","parent_name":"RoaringBitmap"},"Classes/RoaringBitmap.html#/s:12SwiftRoaring0B6BitmapC8isSubsetSbAC2of_tF":{"name":"isSubset(of:)","abstract":"<p>Return true if all the elements of ra1 are also in ra2.</p>","parent_name":"RoaringBitmap"},"Classes/RoaringBitmap.html#/s:12SwiftRoaring0B6BitmapC14isStrictSubsetSbAC2of_tF":{"name":"isStrictSubset(of:)","abstract":"<p>Return true if all the elements of ra1 are also in ra2 and ra2 is strictly","parent_name":"RoaringBitmap"},"Classes/RoaringBitmap.html#/s:12SwiftRoaring0B6BitmapC9lazyUnionA2C_Sb16bitsetconversiontF":{"name":"lazyUnion(_:bitsetconversion:)","abstract":"<p>(For expert users who seek high performance.)</p>","parent_name":"RoaringBitmap"},"Classes/RoaringBitmap.html#/s:12SwiftRoaring0B6BitmapC13formLazyUnionyAC_Sb16bitsetconversiontF":{"name":"formLazyUnion(_:bitsetconversion:)","abstract":"<p>(For expert users who seek high performance.)","parent_name":"RoaringBitmap"},"Classes/RoaringBitmap.html#/s:12SwiftRoaring0B6BitmapC15repairAfterLazyyyF":{"name":"repairAfterLazy()","abstract":"<p>(For expert users who seek high performance.)</p>","parent_name":"RoaringBitmap"},"Classes/RoaringBitmap.html#/s:12SwiftRoaring0B6BitmapC23lazySymmetricDifferenceA2CF":{"name":"lazySymmetricDifference(_:)","abstract":"<p>Computes the symmetric difference between two bitmaps and returns new bitmap.","parent_name":"RoaringBitmap"},"Classes/RoaringBitmap.html#/s:12SwiftRoaring0B6BitmapC27formLazySymmetricDifferenceyACF":{"name":"formLazySymmetricDifference(_:)","abstract":"<p>(For expert users who seek high performance.)","parent_name":"RoaringBitmap"},"Classes/RoaringBitmap.html#/s:12SwiftRoaring0B6BitmapC4flipACs6UInt64V10rangeStart_AF0F3EndtF":{"name":"flip(rangeStart:rangeEnd:)","abstract":"<p>compute the negation of the roaring bitmap within a specified","parent_name":"RoaringBitmap"},"Classes/RoaringBitmap.html#/s:12SwiftRoaring0B6BitmapC11flipInplaceys6UInt64V10rangeStart_AF0G3EndtF":{"name":"flipInplace(rangeStart:rangeEnd:)","abstract":"<p>compute (in place) the negation of the roaring bitmap within a specified","parent_name":"RoaringBitmap"},"Classes/RoaringBitmap.html#/s:12SwiftRoaring0B6BitmapC4copyACyF":{"name":"copy()","abstract":"<p>Undocumented</p>","parent_name":"RoaringBitmap"},"Classes/RoaringBitmap.html#/s:12SwiftRoaring0B6BitmapC3addys6UInt32VF":{"name":"add(_:)","abstract":"<p>Add value to bitmap</p>","parent_name":"RoaringBitmap"},"Classes/RoaringBitmap.html#/s:12SwiftRoaring0B6BitmapC7addManyySays6UInt32VG6values_tF":{"name":"addMany(values:)","abstract":"<p>Add values in format [UInt32], faster than repeatedly calling","parent_name":"RoaringBitmap"},"Classes/RoaringBitmap.html#/s:12SwiftRoaring0B6BitmapC8addCheckSbs6UInt32VF":{"name":"addCheck(_:)","abstract":"<p>Add value x","parent_name":"RoaringBitmap"},"Classes/RoaringBitmap.html#/s:12SwiftRoaring0B6BitmapC14addRangeClosedys6UInt32V3min_AF3maxtF":{"name":"addRangeClosed(min:max:)","abstract":"<p>Add all values in range [min, max]</p>","parent_name":"RoaringBitmap"},"Classes/RoaringBitmap.html#/s:12SwiftRoaring0B6BitmapC8addRangeys6UInt64V3min_AF3maxtF":{"name":"addRange(min:max:)","abstract":"<p>Add all values in range [min, max)</p>","parent_name":"RoaringBitmap"},"Classes/RoaringBitmap.html#/s:12SwiftRoaring0B6BitmapC6removeys6UInt32VF":{"name":"remove(_:)","abstract":"<p>Remove value x</p>","parent_name":"RoaringBitmap"},"Classes/RoaringBitmap.html#/s:12SwiftRoaring0B6BitmapC17removeRangeClosedys6UInt32V3min_AF3maxtF":{"name":"removeRangeClosed(min:max:)","abstract":"<p>Remove all values in range [min, max]</p>","parent_name":"RoaringBitmap"},"Classes/RoaringBitmap.html#/s:12SwiftRoaring0B6BitmapC11removeRangeys6UInt64V3min_AF3maxtF":{"name":"removeRange(min:max:)","abstract":"<p>Remove all values in range [min, max)</p>","parent_name":"RoaringBitmap"},"Classes/RoaringBitmap.html#/s:12SwiftRoaring0B6BitmapC11removeCheckSbs6UInt32VF":{"name":"removeCheck(_:)","abstract":"<p>Remove value x","parent_name":"RoaringBitmap"},"Classes/RoaringBitmap.html#/s:12SwiftRoaring0B6BitmapC5clearyyF":{"name":"clear()","abstract":"<p>Empties the bitmap.</p>","parent_name":"RoaringBitmap"},"Classes/RoaringBitmap.html#/s:12SwiftRoaring0B6BitmapC5counts6UInt64Vvp":{"name":"count","abstract":"<p>Get the cardinality of the bitmap (number of elements).</p>","parent_name":"RoaringBitmap"},"Classes/RoaringBitmap.html#/s:12SwiftRoaring0B6BitmapC8containsSbs6UInt32VF":{"name":"contains(_:)","abstract":"<p>Check if value x is present</p>","parent_name":"RoaringBitmap"},"Classes/RoaringBitmap.html#/s:12SwiftRoaring0B6BitmapC13containsRangeSbs6UInt64V5start_AF3endtF":{"name":"containsRange(start:end:)","abstract":"<p>Check whether a range of values from start (included) to end (excluded) is present</p>","parent_name":"RoaringBitmap"},"Classes/RoaringBitmap.html#/s:12SwiftRoaring0B6BitmapC7isEmptySbvp":{"name":"isEmpty","abstract":"<p>Check whether the bitmap is empty</p>","parent_name":"RoaringBitmap"},"Classes/RoaringBitmap.html#/s:12SwiftRoaring0B6BitmapC5printyyF":{"name":"print()","abstract":"<p>Print the content of the bitmap.</p>","parent_name":"RoaringBitmap"},"Classes/RoaringBitmap.html#/s:12SwiftRoaring0B6BitmapC8describeyyF":{"name":"describe()","abstract":"<p>Describe the inner structure of the bitmap.</p>","parent_name":"RoaringBitmap"},"Classes/RoaringBitmap.html#/s:12SwiftRoaring0B6BitmapC7toArraySays6UInt32VGyF":{"name":"toArray()","abstract":"<p>Convert the bitmap to an array.</p>","parent_name":"RoaringBitmap"},"Classes/RoaringBitmap.html#/s:12SwiftRoaring0B6BitmapC20removeRunCompressionSbyF":{"name":"removeRunCompression()","abstract":"<p>Remove run-length encoding even when it is more space efficient","parent_name":"RoaringBitmap"},"Classes/RoaringBitmap.html#/s:12SwiftRoaring0B6BitmapC11runOptimizeSbyF":{"name":"runOptimize()","abstract":"<p>convert array and bitmap containers to run containers when it is more</p>","parent_name":"RoaringBitmap"},"Classes/RoaringBitmap.html#/s:12SwiftRoaring0B6BitmapC6shrinkSiyF":{"name":"shrink()","abstract":"<p>If needed, reallocate memory to shrink the memory usage. Returns","parent_name":"RoaringBitmap"},"Classes/RoaringBitmap.html#/s:12SwiftRoaring0B6BitmapC9serializeSiSays4Int8VG6buffer_tF":{"name":"serialize(buffer:)","abstract":"<p>write the bitmap to an output pointer, this output buffer should refer to","parent_name":"RoaringBitmap"},"Classes/RoaringBitmap.html#/s:12SwiftRoaring0B6BitmapC11deserializeACSays4Int8VG6buffer_tFZ":{"name":"deserialize(buffer:)","abstract":"<p>use with serialize(&hellip;)</p>","parent_name":"RoaringBitmap"},"Classes/RoaringBitmap.html#/s:12SwiftRoaring0B6BitmapC11sizeInBytesSiyF":{"name":"sizeInBytes()","abstract":"<p>How many bytes are required to serialize this bitmap (NOT compatible","parent_name":"RoaringBitmap"},"Classes/RoaringBitmap.html#/s:12SwiftRoaring0B6BitmapC19portableDeserializeACSays4Int8VG6buffer_tFZ":{"name":"portableDeserialize(buffer:)","abstract":"<p>read a bitmap from a serialized version. This is meant to be compatible with","parent_name":"RoaringBitmap"},"Classes/RoaringBitmap.html#/s:12SwiftRoaring0B6BitmapC23portableDeserializeSafeACSays4Int8VG6buffer_Si8maxbytestFZ":{"name":"portableDeserializeSafe(buffer:maxbytes:)","abstract":"<p>read a bitmap from a serialized version in a safe manner (reading up to maxbytes).","parent_name":"RoaringBitmap"},"Classes/RoaringBitmap.html#/s:12SwiftRoaring0B6BitmapC23portableDeserializeSizeSiSays4Int8VG6buffer_Si8maxbytestFZ":{"name":"portableDeserializeSize(buffer:maxbytes:)","abstract":"<p>Check how many bytes would be read (up to maxbytes) at this pointer if there","parent_name":"RoaringBitmap"},"Classes/RoaringBitmap.html#/s:12SwiftRoaring0B6BitmapC19portableSizeInBytesSiyF":{"name":"portableSizeInBytes()","abstract":"<p>How many bytes are required to serialize this bitmap (meant to be compatible","parent_name":"RoaringBitmap"},"Classes/RoaringBitmap.html#/s:12SwiftRoaring0B6BitmapC17portableSerializeSiSays4Int8VG6buffer_tF":{"name":"portableSerialize(buffer:)","abstract":"<p>write a bitmap to a char buffer.  The output buffer should refer to at least","parent_name":"RoaringBitmap"},"Classes/RoaringBitmap.html#/s:12SwiftRoaring0B6BitmapC6selectSbs6UInt32V4rank_AF5valuetF":{"name":"select(rank:value:)","parent_name":"RoaringBitmap"},"Classes/RoaringBitmap.html#/s:12SwiftRoaring0B6BitmapC4ranks6UInt64Vs6UInt32V5value_tF":{"name":"rank(value:)","abstract":"<p>Returns the number of integers that are smaller or equal to x.</p>","parent_name":"RoaringBitmap"},"Classes/RoaringBitmap.html#/s:12SwiftRoaring0B6BitmapC3mins6UInt32VyF":{"name":"min()","abstract":"<p>Returns the smallest value in the set.","parent_name":"RoaringBitmap"},"Classes/RoaringBitmap.html#/s:12SwiftRoaring0B6BitmapC3maxs6UInt32VyF":{"name":"max()","abstract":"<p>Returns the greatest value in the set.","parent_name":"RoaringBitmap"},"Classes/RoaringBitmap.html#/s:12SwiftRoaring0B6BitmapC10statisticsSC08roaring_D2_sVyF":{"name":"statistics()","abstract":"<p>(For advanced users.)","parent_name":"RoaringBitmap"},"Classes/RoaringBitmap.html#/s:12SwiftRoaring0B6BitmapC12makeIteratorAC0bcE0VyF":{"name":"makeIterator()","abstract":"<p>Creates a RoaringBitmapIterator.</p>","parent_name":"RoaringBitmap"},"Classes/RoaringBitmap/RoaringBitmapIterator.html":{"name":"RoaringBitmapIterator","abstract":"<p>code used to iterate through values in a roaring bitmap</p>","parent_name":"RoaringBitmap"},"Classes/RoaringBitmap.html#/s:s23CustomStringConvertibleP11descriptionSSvp":{"name":"description","parent_name":"RoaringBitmap"},"Classes/RoaringBitmap.html#/s:s8HashableP9hashValueSivp":{"name":"hashValue","parent_name":"RoaringBitmap"},"Classes/RoaringBitmap.html":{"name":"RoaringBitmap","abstract":"<p>Swift wrapper for CRoaring (a C/C++ implementation at <a href=\"https://github.com/RoaringBitmap/CRoaring\">https://github.com/RoaringBitmap/CRoaring</a>)</p>"},"Classes.html":{"name":"Classes","abstract":"<p>The following classes are available globally.</p>"},"Typealiases.html":{"name":"Type Aliases","abstract":"<p>The following type aliases are available globally.</p>"}}